import multer from 'multer';
import sharp from 'sharp';
import * as path from 'path';
import * as fs from 'fs';
import { Request, Response, NextFunction } from 'express';

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
const uploadsDir = path.join(process.cwd(), 'uploads');
const avatarsDir = path.join(uploadsDir, 'avatars');

if (!fs.existsSync(uploadsDir)) {
  console.log('üìÅ Creating uploads directory...');
  fs.mkdirSync(uploadsDir, { recursive: true });
}

if (!fs.existsSync(avatarsDir)) {
  console.log('üìÅ Creating avatars directory...');
  fs.mkdirSync(avatarsDir, { recursive: true });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Sharp
const storage = multer.memoryStorage();

// –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
const fileFilter = (req: any, file: any, cb: any) => {
  console.log('üîç [UPLOAD DEBUG] File filter called:', {
    originalname: file.originalname,
    mimetype: file.mimetype,
    fieldname: file.fieldname,
  });

  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (file.mimetype.startsWith('image/')) {
    console.log('‚úÖ [UPLOAD DEBUG] File type accepted');
    cb(null, true);
  } else {
    console.log('‚ùå [UPLOAD DEBUG] File type rejected');
    cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!'), false);
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer
const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB –º–∞–∫—Å–∏–º—É–º
  },
  fileFilter: fileFilter,
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
export const uploadAvatar = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  console.log('üîç [UPLOAD DEBUG] uploadAvatar middleware called');
  console.log('üîç [UPLOAD DEBUG] Request method:', req.method);
  console.log('üîç [UPLOAD DEBUG] Request path:', req.path);
  console.log('üîç [UPLOAD DEBUG] Request URL:', req.url);
  console.log('üîç [UPLOAD DEBUG] Original URL:', req.originalUrl);
  console.log('üîç [UPLOAD DEBUG] Content-Type:', req.headers['content-type']);

  const uploadSingle = upload.single('avatar');

  uploadSingle(req, res, async (err) => {
    console.log('üîç [UPLOAD DEBUG] Upload callback called');

    if (err) {
      console.log('‚ùå [UPLOAD DEBUG] Upload error in middleware:', err);
      console.log('‚ùå [UPLOAD DEBUG] Error type:', typeof err);
      console.log('‚ùå [UPLOAD DEBUG] Error constructor:', err.constructor.name);
      return next(err);
    }

    console.log('‚úÖ [UPLOAD DEBUG] Upload middleware completed successfully');
    console.log(
      'üîç [UPLOAD DEBUG] File after upload:',
      req.file ? 'Present' : 'Missing'
    );

    if (!req.file) {
      console.log('‚ùå [UPLOAD DEBUG] No file in request');
      return next(new Error('–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω'));
    }

    try {
      console.log('üîç [UPLOAD DEBUG] Processing image with Sharp...');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
      const filename = `avatar-${uniqueSuffix}.webp`;
      const filepath = path.join(avatarsDir, filename);

      console.log('üîç [UPLOAD DEBUG] Generated filename:', filename);
      console.log('üîç [UPLOAD DEBUG] File path:', filepath);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Sharp
      await sharp(req.file.buffer)
        .resize(300, 300, {
          fit: 'cover',
          position: 'center',
        })
        .webp({ quality: 80 })
        .toFile(filepath);

      console.log('‚úÖ [UPLOAD DEBUG] Image processed and saved successfully');

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ req –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
      (req as any).processedFile = {
        filename: filename,
        path: filepath,
        originalname: req.file.originalname,
        mimetype: 'image/webp',
        size: fs.statSync(filepath).size,
      };

      console.log(
        'üîç [UPLOAD DEBUG] Processed file info:',
        (req as any).processedFile
      );
      next();
    } catch (processError) {
      console.log('‚ùå [UPLOAD DEBUG] Error processing image:', processError);
      next(processError);
    }
  });
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
export const handleUploadError = (
  err: any,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  console.log('üîç [UPLOAD DEBUG] Upload error handler called');

  if (err instanceof multer.MulterError) {
    console.log('‚ùå [UPLOAD DEBUG] Multer error:', err.code, err.message);
    if (err.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        status: 'error',
        message: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB',
      });
    }
    if (err.code === 'LIMIT_UNEXPECTED_FILE') {
      return res.status(400).json({
        status: 'error',
        message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ "avatar"',
      });
    }
  }

  if (err) {
    console.log('‚ùå [UPLOAD DEBUG] General upload error:', err.message);
    return res.status(400).json({
      status: 'error',
      message: err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞',
    });
  }

  console.log(
    '‚úÖ [UPLOAD DEBUG] No upload errors, proceeding to next middleware'
  );
  next();
};
