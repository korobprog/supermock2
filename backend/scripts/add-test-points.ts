import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function addTestPoints() {
  try {
    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–≥–æ–≤
    const userId = '757780a7-95ef-4bdf-a687-680f5dc0163d';

    console.log('üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∞–ª–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: { profile: true },
    });

    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userId);
      return;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactions = [
      {
        userId,
        amount: 100,
        type: 'EARNED' as const,
        description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å',
      },
      {
        userId,
        amount: 50,
        type: 'EARNED' as const,
        description: '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è',
      },
      {
        userId,
        amount: 25,
        type: 'SPENT' as const,
        description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é',
      },
    ];

    for (const transaction of transactions) {
      const created = await prisma.pointsTransaction.create({
        data: transaction,
      });
      console.log(
        `‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${transaction.type} ${transaction.amount} - ${transaction.description}`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    const allTransactions = await prisma.pointsTransaction.findMany({
      where: { userId },
      orderBy: { createdAt: 'desc' },
    });

    const balance = allTransactions.reduce((sum, t) => {
      return t.type === 'EARNED' ? sum + t.amount : sum - t.amount;
    }, 0);

    console.log('üéØ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', balance, '–±–∞–ª–ª–æ–≤');
    console.log('üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allTransactions.length);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTestPoints();
