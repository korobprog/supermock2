import api from './axios';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
export interface TimeSlot {
  id: string;
  interviewerId: string;
  interviewer: {
    id: string;
    profile?: {
      firstName: string;
      lastName: string;
      specialization: string;
    };
  };
  startTime: string;
  endTime: string;
  specialization: string;
  status: 'AVAILABLE' | 'BOOKED' | 'CANCELLED';
  createdAt: string;
  updatedAt: string;
  booking?: {
    id: string;
    candidateId: string;
    status: 'CREATED' | 'CONFIRMED' | 'CANCELLED' | 'COMPLETED';
    candidate: {
      id: string;
      profile?: {
        firstName: string;
        lastName: string;
      };
    };
    interview?: {
      id: string;
      status: 'SCHEDULED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED';
      title: string;
    };
  };
}

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
export interface Booking {
  id: string;
  slotId: string;
  slot: TimeSlot;
  candidateId: string;
  candidate: {
    id: string;
    profile?: {
      firstName: string;
      lastName: string;
    };
  };
  status: 'CREATED' | 'CONFIRMED' | 'CANCELLED' | 'COMPLETED';
  pointsSpent: number;
  interviewId?: string;
  interview?: {
    id: string;
    title: string;
    status: 'SCHEDULED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED';
    scheduledAt: string;
    duration: number;
  };
  createdAt: string;
  updatedAt: string;
}

// –¢–∏–ø—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
export interface CreateTimeSlotData {
  startTime: string;
  endTime: string;
  specialization: string;
}

// –¢–∏–ø—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
export interface UpdateTimeSlotData {
  startTime?: string;
  endTime?: string;
  specialization?: string;
  status?: 'AVAILABLE' | 'BOOKED' | 'CANCELLED';
}

// –¢–∏–ø—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
export interface CreateBookingData {
  slotId: string;
}

// –¢–∏–ø—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
export interface CancelBookingData {
  reason?: string;
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
export interface GetTimeSlotsParams {
  specialization?: string;
  status?: 'AVAILABLE' | 'BOOKED' | 'CANCELLED';
  startDate?: string;
  endDate?: string;
  interviewerId?: string;
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
export interface GetBookingsParams {
  status?: 'CREATED' | 'CONFIRMED' | 'CANCELLED' | 'COMPLETED';
  specialization?: string;
  startDate?: string;
  endDate?: string;
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
 */
export const getTimeSlots = async (
  params?: GetTimeSlotsParams
): Promise<TimeSlot[]> => {
  console.log(
    'üîç [DEBUG API] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /timeslots —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:',
    params
  );
  try {
    const response = await api.get('/timeslots', { params });
    console.log('üîç [DEBUG API] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç /timeslots:', {
      status: response.status,
      dataLength: response.data?.length,
      data: response.data,
    });
    return response.data;
  } catch (error: any) {
    console.error('üîç [DEBUG API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /timeslots:', error);
    if (error?.response) {
      console.error('üîç [DEBUG API] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ—à–∏–±–∫–æ–π:', {
        status: error.response.status,
        data: error.response.data,
        headers: error.response.headers,
      });
    }
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—à–ª—ã–µ)
 */
export const getInterviewerTimeSlots = async (
  params?: Omit<GetTimeSlotsParams, 'interviewerId'>
): Promise<TimeSlot[]> => {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const token = localStorage.getItem('token');
  if (!token) {
    throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const payload = JSON.parse(atob(token.split('.')[1]));
    const interviewerId = payload.id;

    const response = await api.get('/timeslots', {
      params: {
        ...params,
        interviewerId,
        // –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ—Ç—ã
        status: undefined,
      },
    });
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –ø–æ ID
 */
export const getTimeSlotById = async (id: string): Promise<TimeSlot> => {
  const response = await api.get(`/timeslots/${id}`);
  return response.data;
};

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
 */
export const createTimeSlot = async (
  data: CreateTimeSlotData
): Promise<TimeSlot> => {
  const response = await api.post('/timeslots', data);
  return response.data;
};

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
 */
export const updateTimeSlot = async (
  id: string,
  data: UpdateTimeSlotData
): Promise<TimeSlot> => {
  const response = await api.patch(`/timeslots/${id}`, data);
  return response.data;
};

/**
 * –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
 */
export const deleteTimeSlot = async (id: string): Promise<void> => {
  await api.delete(`/timeslots/${id}`);
};

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getBookings = async (
  params?: GetBookingsParams
): Promise<Booking[]> => {
  const response = await api.get('/bookings', { params });
  return response.data;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞
 */
export const getInterviewerBookings = async (
  params?: GetBookingsParams
): Promise<Booking[]> => {
  const response = await api.get('/bookings/interviewer', { params });
  return response.data;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID
 */
export const getBookingById = async (id: string): Promise<Booking> => {
  const response = await api.get(`/bookings/${id}`);
  return response.data;
};

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export const createBooking = async (
  data: CreateBookingData
): Promise<Booking> => {
  const response = await api.post('/bookings', data);
  return response.data;
};

/**
 * –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export const cancelBooking = async (
  id: string,
  data?: CancelBookingData
): Promise<Booking> => {
  const response = await api.patch(`/bookings/${id}/cancel`, data || {});
  return response.data;
};

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞)
 */
export const confirmBooking = async (id: string): Promise<Booking> => {
  const response = await api.patch(`/bookings/${id}/confirm`);
  return response.data;
};

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatDateTime = (dateTime: string): string => {
  const date = new Date(dateTime);
  return date.toLocaleString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    timeZone: 'Europe/Moscow',
  });
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatDate = (dateTime: string): string => {
  const date = new Date(dateTime);
  return date.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    timeZone: 'Europe/Moscow',
  });
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatTime = (dateTime: string): string => {
  const date = new Date(dateTime);
  return date.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit',
    timeZone: 'Europe/Moscow',
  });
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 */
export const getStatusDisplayName = (status: string): string => {
  const statusMap: { [key: string]: string } = {
    // –°—Ç–∞—Ç—É—Å—ã –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    AVAILABLE: '–î–æ—Å—Ç—É–ø–µ–Ω',
    BOOKED: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω',
    CANCELLED: '–û—Ç–º–µ–Ω–µ–Ω',
    // –°—Ç–∞—Ç—É—Å—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    CREATED: '–°–æ–∑–¥–∞–Ω–æ',
    CONFIRMED: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    COMPLETED: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
  };
  return statusMap[status] || status;
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 */
export const getStatusColor = (
  status: string
):
  | 'default'
  | 'primary'
  | 'secondary'
  | 'error'
  | 'info'
  | 'success'
  | 'warning' => {
  const colorMap: {
    [key: string]:
      | 'default'
      | 'primary'
      | 'secondary'
      | 'error'
      | 'info'
      | 'success'
      | 'warning';
  } = {
    // –°—Ç–∞—Ç—É—Å—ã –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    AVAILABLE: 'success',
    BOOKED: 'primary',
    CANCELLED: 'error',
    // –°—Ç–∞—Ç—É—Å—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    CREATED: 'info',
    CONFIRMED: 'success',
    COMPLETED: 'default',
  };
  return colorMap[status] || 'default';
};
