"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
function checkTimeSlots() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
            // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
            const totalCount = yield prisma.timeSlot.count();
            console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: ${totalCount}`);
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            const availableCount = yield prisma.timeSlot.count({
                where: { status: 'AVAILABLE' },
            });
            const bookedCount = yield prisma.timeSlot.count({
                where: { status: 'BOOKED' },
            });
            const cancelledCount = yield prisma.timeSlot.count({
                where: { status: 'CANCELLED' },
            });
            console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: ${availableCount}`);
            console.log(`üìä –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã: ${bookedCount}`);
            console.log(`üìä –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã: ${cancelledCount}`);
            // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–ª–æ—Ç–æ–≤
            const sampleSlots = yield prisma.timeSlot.findMany({
                take: 5,
                include: {
                    interviewer: {
                        include: {
                            profile: true,
                        },
                    },
                    booking: {
                        include: {
                            candidate: {
                                include: {
                                    profile: true,
                                },
                            },
                            interview: true,
                        },
                    },
                },
            });
            console.log('üìã –ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ—Ç–æ–≤:');
            sampleSlots.forEach((slot, index) => {
                var _a, _b, _c, _d;
                console.log(`${index + 1}. ID: ${slot.id}`);
                console.log(`   –°—Ç–∞—Ç—É—Å: ${slot.status}`);
                console.log(`   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${slot.specialization}`);
                console.log(`   –í—Ä–µ–º—è: ${slot.startTime} - ${slot.endTime}`);
                console.log(`   –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: ${(_a = slot.interviewer.profile) === null || _a === void 0 ? void 0 : _a.firstName} ${(_b = slot.interviewer.profile) === null || _b === void 0 ? void 0 : _b.lastName}`);
                if (slot.booking) {
                    console.log(`   –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${slot.booking.status}`);
                    console.log(`   –ö–∞–Ω–¥–∏–¥–∞—Ç: ${(_c = slot.booking.candidate.profile) === null || _c === void 0 ? void 0 : _c.firstName} ${(_d = slot.booking.candidate.profile) === null || _d === void 0 ? void 0 : _d.lastName}`);
                }
                console.log('---');
            });
            // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const usersCount = yield prisma.user.count();
            const interviewersCount = yield prisma.user.count({
                where: { role: 'INTERVIEWER' },
            });
            const candidatesCount = yield prisma.user.count({
                where: { role: 'USER' },
            });
            console.log(`üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}`);
            console.log(`üë®‚Äçüíº –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã: ${interviewersCount}`);
            console.log(`üë®‚Äçüíª –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: ${candidatesCount}`);
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
        finally {
            yield prisma.$disconnect();
        }
    });
}
checkTimeSlots();
