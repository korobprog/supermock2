import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function addTestTimeSlots() {
  try {
    console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...');

    // –ù–∞–π–¥–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞
    const interviewer = await prisma.user.findFirst({
      where: { role: 'INTERVIEWER' },
    });

    if (!interviewer) {
      console.error('‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üë®‚Äçüíº –ù–∞–π–¥–µ–Ω –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: ${interviewer.id}`);

    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(10, 0, 0, 0); // 10:00

    const dayAfterTomorrow = new Date();
    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);
    dayAfterTomorrow.setHours(14, 0, 0, 0); // 14:00

    const testSlots = [
      {
        interviewerId: interviewer.id,
        startTime: new Date(tomorrow),
        endTime: new Date(tomorrow.getTime() + 60 * 60 * 1000), // +1 —á–∞—Å
        specialization: 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        status: 'AVAILABLE' as const,
      },
      {
        interviewerId: interviewer.id,
        startTime: new Date(tomorrow.getTime() + 2 * 60 * 60 * 1000), // +2 —á–∞—Å–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ
        endTime: new Date(tomorrow.getTime() + 3 * 60 * 60 * 1000), // +3 —á–∞—Å–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ
        specialization: 'Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        status: 'AVAILABLE' as const,
      },
      {
        interviewerId: interviewer.id,
        startTime: new Date(dayAfterTomorrow),
        endTime: new Date(dayAfterTomorrow.getTime() + 60 * 60 * 1000), // +1 —á–∞—Å
        specialization: 'Fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        status: 'AVAILABLE' as const,
      },
      {
        interviewerId: interviewer.id,
        startTime: new Date(dayAfterTomorrow.getTime() + 2 * 60 * 60 * 1000), // +2 —á–∞—Å–∞
        endTime: new Date(dayAfterTomorrow.getTime() + 3 * 60 * 60 * 1000), // +3 —á–∞—Å–∞
        specialization: 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        status: 'AVAILABLE' as const,
      },
    ];

    console.log('üìÖ –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ—Ç—ã:');
    testSlots.forEach((slot, index) => {
      console.log(`${index + 1}. ${slot.specialization}`);
      console.log(`   –í—Ä–µ–º—è: ${slot.startTime} - ${slot.endTime}`);
    });

    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã
    for (const slotData of testSlots) {
      const slot = await prisma.timeSlot.create({
        data: slotData,
        include: {
          interviewer: {
            include: {
              profile: true,
            },
          },
        },
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Å–ª–æ—Ç: ${slot.id} (${slot.specialization})`);
    }

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

    // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
    const totalCount = await prisma.timeSlot.count();
    const availableCount = await prisma.timeSlot.count({
      where: { status: 'AVAILABLE' },
    });

    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: ${totalCount}`);
    console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: ${availableCount}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTestTimeSlots();
